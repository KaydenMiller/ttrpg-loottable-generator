@page "/descriptors"
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.Interfaces
@using KaydenMiller.TableTop.LootTableGenerator.Domain.DescriptorAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Domain.LootAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Domain.ModifierAggregate
@using Throw
@inject IDescriptorRepository DescriptorRepository
@inject ILootRepository LootRepository

<MudContainer>
    <h3>Descriptors</h3>
    
    <h4>Loot To Add</h4>
    <ul>
        @foreach (var loot in @Model?.LootToAdd ?? Enumerable.Empty<Loot>())
        {
            <li>ID: @loot.Id</li>
        }
    </ul>
    
    <h4>Modifiers To Add</h4>
    <ul>
        @foreach (var modifier in @Model?.ModifiersToAdd ?? Enumerable.Empty<Modifier>())
        {
            <li>ID: @modifier.Id</li>
        }
    </ul>
    
    <label>Loot Id</label>
    <InputText @bind-Value="LootId"></InputText> 
    <button onclick="@AddLoot(LootId)">Add Loot</button>
    
    <EditForm Model="@Model" OnSubmit="@Submit">
        <label>Descriptor Name</label>
        <InputText @bind-Value="Model!.Name"></InputText>
        <button type="submit">Create Descriptor</button>
    </EditForm>
    
    <label>Descriptor Id</label>
    <InputText @bind-Value="DescriptorToSelect"></InputText>
    <button onclick="@GetDescriptorById(DescriptorToSelect ?? "")">Get Descriptor</button>
    
    @if (CurrentDescriptor is not null)
    {
    <div>
        <h1>Descriptor</h1>
        <h2>@CurrentDescriptor.Name</h2>
        
        <ul>
            @foreach (var loot in CurrentDescriptor.GetAvailableLootIds())
            {
                <li>@loot</li>
            }
        </ul>
    </div>
    }
</MudContainer>

@code {
    public Descriptor? CurrentDescriptor { get; set; }
    public string? DescriptorToSelect { get; set; }
    
    public CreateDescriptorForm? Model { get; set; }
    public string? LootId { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private async Task AddLoot(string? lootId)
    {
        lootId.ThrowIfNull();
        var id = Guid.Parse(lootId);
        var loot = await LootRepository.ReadLootAsync(id);
        Model!.LootToAdd.Add(loot);
    }

    private async Task Submit()
    {
        Model.ThrowIfNull();
        Model.Name.ThrowIfNull();
        Model.LootToAdd.Throw().IfCountEquals(0);

        var descriptor = new Descriptor(Model.Name);

        foreach (var item in Model.LootToAdd)
        {
            descriptor.AddLoot(item);
        }

        foreach (var modifier in Model.ModifiersToAdd)
        {
            descriptor.AddModifier(modifier);
        }

        await DescriptorRepository.AddDescriptorAsync(descriptor);
    }

    private async Task GetDescriptorById(string descriptorId)
    {
        var id = Guid.Parse(descriptorId);
        CurrentDescriptor = await DescriptorRepository.ReadDescriptorAsync(id);
    }

    public class CreateDescriptorForm
    {
        public string Name { get; set; } = null!;
        public List<Loot> LootToAdd { get; set; } = new();
        public List<Modifier> ModifiersToAdd { get; set; } = new();
    }
}