@page "/loot-item"
@using Throw
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.Interfaces
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.ValueObjects
@using KaydenMiller.TableTop.LootTableGenerator.Domain.LootAggregate
@using KaydenMiller.TableTob.LootTableGenerator.Site.Data
@using KaydenMiller.TableTob.LootTableGenerator.Site.Extensions
@inject ILootRepository LootRepository
@inject IEquipmentRepository EquipmentRepository

<MudContainer>
    <MudPaper>
        <h3>Loot</h3>
        
        <MudForm @ref="_form" @bind-isValid="@success" @bind-Errors="@errors" Model="@LootFormModel">
            <MudSelect T="string" Label="Backing Equipment" AnchorOrigin="Origin.BottomCenter" 
                       @bind-Value="@LootFormModel!.EquipmentId">
                @foreach (var equip in _availableEquipment)
                {
                    <MudSelectItem Value="@(equip.Id.ToString())">@(equip.Name)</MudSelectItem>
                }
            </MudSelect>
            <MudTextField T="string" Label="Loot Name" Required="true" RequiredError="Loot Name is Required"
                          @bind-Value="LootFormModel!.Name"/>
            <MudSelect T="RarityType"
                       Label="Rarity Level" 
                       AnchorOrigin="Origin.BottomCenter"
                       ValueChanged="@((v) => LootFormModel.Rarity = v.ToPercentage().ToInteger())">
                <MudSelectItem Value="@(RarityType.Common)">@(nameof(RarityType.Common))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.Uncommon)">@(nameof(RarityType.Uncommon))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.Rare)">@(nameof(RarityType.Rare))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.VeryRare)">@(nameof(RarityType.VeryRare))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.Legendary)">@(nameof(RarityType.Legendary))</MudSelectItem>
            </MudSelect>
            <MudTextField T="int" Label="Percentage Rarity" Required="true" RequiredError="Rarity is required"
                          @bind-Value="LootFormModel!.Rarity"/>
            <MudTextField T="int" Label="Min Quantity" Required="true" RequiredError="Min Quantity is required"
                          @bind-Value="LootFormModel!.MinQuantity"/>
            <MudTextField T="int" Label="Max Quantity" Required="true" RequiredError="Max Quantity is required"
                          @bind-Value="LootFormModel!.MaxQuantity"/>

            <MudButton Color="Color.Primary" Disabled="@(!success)" OnClick="@Submit" Class="ml-auto">Create Loot</MudButton>
        </MudForm>
    </MudPaper>
    <MudPaper>
        <MudText Typo="Typo.subtitle2">@($"Errors: ({errors.Length})")</MudText>
        @foreach (var error in errors)
        {
            <MudText Color="@Color.Error">@error</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private bool success;
    private string[] errors =  { };
    private List<TableTop.LootTableGenerator.Domain.EquipmentAggregate.Equipment> _availableEquipment = new();
    private RarityType _selectedRarity = RarityType.Common;

    private MudForm _form;
    
    public CreateLootForm? LootFormModel { get; set; }

    protected override void OnInitialized()
    {
        LootFormModel ??= new();
        LoadEquipment();
    }

    private void LoadEquipment()
    {
        _availableEquipment = EquipmentRepository.ReadEquipment().ToList();
    }

    private async Task Submit()
    {
        LootFormModel.ThrowIfNull();

        var percentResult = Percentage.FromInt(LootFormModel.Rarity);
        var lootResult = Loot.Create(
            Guid.Parse(LootFormModel.EquipmentId),
            LootFormModel.Name,
            percentResult.Value,
            LootFormModel.MinQuantity,
            LootFormModel.MaxQuantity,
            null
            );
        await LootRepository.CreateLootAsync(lootResult.Value);
    }

    public class CreateLootForm
    {
        public string EquipmentId { get; set; }
        public string Name { get; set; }
        public int Rarity { get; set; }
        public int MaxQuantity { get; set; }
        public int MinQuantity { get; set; }
    }
}