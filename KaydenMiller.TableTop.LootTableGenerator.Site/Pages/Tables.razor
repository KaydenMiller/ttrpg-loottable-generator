@page "/tables"
@using KaydenMiller.TableTop.LootTableGenerator.Domain.DescriptorAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.Interfaces
@using System.Collections.ObjectModel
@using KaydenMiller.TableTop.LootTableGenerator.Domain.LootAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Site.Components
@inject IDescriptorRepository DescriptorRepository
@inject ILootRepository LootRepository

<MudContainer>
    <TTPaper>
        <h3>Tables</h3>
        
        <MudGrid Spacing="2" Justify="Justify.Center">
            @foreach (var descriptor in _descriptors)
            {
                <MudItem>
                    <TTDescriptorCard Descriptor="descriptor" 
                                      LootRepository="LootRepository"
                                      OnSelected="AddDescriptor"
                                      />
                </MudItem>
            }
        </MudGrid>
    </TTPaper>
    <TTPaper>
        <MudTable T="string" Items="_selectedDescriptors.Select(d => d.Name)" Dense="true">
            <HeaderContent>
                <MudTd>Descriptor</MudTd>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Descriptor">@context</MudTd>
            </RowTemplate>
        </MudTable>
        
        <MudButton Color="Color.Primary" OnClick="@(async () => await Generate())">Generate</MudButton>
        
        <MudTable T="Descriptors.CalculatedLootItem" Items="_calculatedLootItems" Dense="true">
            <HeaderContent>
                <MudTd>Name</MudTd>
                <MudTd>Count Available</MudTd>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Count Available">@context.CountAvailable</MudTd>
            </RowTemplate>
        </MudTable>
    </TTPaper>
</MudContainer>

@code {
    private IEnumerable<Descriptor> _descriptors = new List<Descriptor>();
    private ObservableCollection<Descriptor> _selectedDescriptors = new();
    private IEnumerable<Descriptors.CalculatedLootItem> _calculatedLootItems = new List<Descriptors.CalculatedLootItem>();

    protected override void OnInitialized()
    {
        _descriptors = DescriptorRepository.ReadDescriptors().ToList();
    }

    private void AddDescriptor(Descriptor descriptor)
    {
        _selectedDescriptors.Add(descriptor);
    }

    private async Task<IEnumerable<Descriptors.CalculatedLootItem>> GenerateLoot()
    {
        // Get all possible loot item ids
        var lootIds =_selectedDescriptors.SelectMany(d => d.GetAvailableLootIds());
        // Get all loot items
        var tasks = lootIds.Select(id => LootRepository.ReadLootByIdAsync(id)).ToArray();
        var lootItems = new List<Loot>();
        foreach (var task in tasks)
        {
            lootItems.Add(await task);
        }
        var rolledLoot = lootItems.Select(li => new Descriptors.CalculatedLootItem(li.Id, li.Name, li.Roll()));
        var groupedLoot = rolledLoot.GroupBy(rl => rl.RootLootItemId);
        var mergedLoot = groupedLoot
            .Select(g => g.Aggregate((x, y) => x with { CountAvailable = x.CountAvailable + y.CountAvailable }));

        return mergedLoot;
    }

    private async Task Generate()
    {
        _calculatedLootItems = await GenerateLoot();
    }

}