@page "/loot-item"
@using Throw
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.Interfaces
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.ValueObjects
@using KaydenMiller.TableTop.LootTableGenerator.Domain.LootAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Site.Data
@using KaydenMiller.TableTop.LootTableGenerator.Site.Extensions
@using KaydenMiller.TableTop.LootTableGenerator.Site.Components
@inject ILootRepository LootRepository
@inject IEquipmentRepository EquipmentRepository

<MudContainer>
    <TTPaper>
        <h3>Loot</h3>
        
        <MudForm @ref="_form" @bind-isValid="@_success" @bind-Errors="@_errors" Model="@LootFormModel">
            <MudSelect T="string" Label="Backing Equipment" AnchorOrigin="Origin.BottomCenter" 
                       @bind-Value="@LootFormModel!.EquipmentId">
                @foreach (var equip in _availableEquipment)
                {
                    <MudSelectItem Value="@(equip.Id.ToString())">@(equip.Name)</MudSelectItem>
                }
            </MudSelect>
            <MudTextField T="string" Label="Loot Name" Required="true" RequiredError="Loot Name is Required"
                          @bind-Value="LootFormModel!.Name"/>
            <MudSelect T="RarityType"
                       Label="Rarity Level" 
                       AnchorOrigin="Origin.BottomCenter"
                       ValueChanged="@((v) => LootFormModel!.Rarity = v.ToPercentage().ToInteger())">
                <MudSelectItem Value="@(RarityType.Common)">@(nameof(RarityType.Common))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.Uncommon)">@(nameof(RarityType.Uncommon))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.Rare)">@(nameof(RarityType.Rare))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.VeryRare)">@(nameof(RarityType.VeryRare))</MudSelectItem>
                <MudSelectItem Value="@(RarityType.Legendary)">@(nameof(RarityType.Legendary))</MudSelectItem>
            </MudSelect>
            <MudTextField T="int" Label="Percentage Rarity" Required="true" RequiredError="Rarity is required"
                          @bind-Value="LootFormModel!.Rarity"/>
            <MudTextField T="int" Label="Min Quantity" Required="true" RequiredError="Min Quantity is required"
                          @bind-Value="LootFormModel!.MinQuantity"/>
            <MudTextField T="int" Label="Max Quantity" Required="true" RequiredError="Max Quantity is required"
                          @bind-Value="LootFormModel!.MaxQuantity"/>
            
            <div>
                <span>
                    <MudTextField T="string" Label="Tag" @bind-Value="_tag" Style="width: 50%;"/>
                    <MudIconButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => LootFormModel!.TagsToAssign.Add(_tag.ThrowIfNull().Throw().IfEmpty()))">
                        <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
                    </MudIconButton>
                </span>
                <MudText>@(string.Join(", ", LootFormModel?.TagsToAssign ?? Enumerable.Empty<string>()))</MudText>
            </div>

            <MudButton Color="Color.Primary" Disabled="@(!_success)" OnClick="@Submit" Class="ml-auto">Create Loot</MudButton>
        </MudForm>
    </TTPaper>
    <TTPaper>
        <MudText Typo="Typo.subtitle2">@($"Errors: ({_errors.Length})")</MudText>
        @foreach (var error in _errors)
        {
            <MudText Color="@Color.Error">@error</MudText>
        }
    </TTPaper>
</MudContainer>

@code {
    private bool _success;
    private string[] _errors =  { };
    private List<TableTop.LootTableGenerator.Domain.EquipmentAggregate.Equipment> _availableEquipment = new();
    private string? _tag;

    private MudForm _form = null!;
    
    public CreateLootForm? LootFormModel { get; set; }

    protected override void OnInitialized()
    {
        LootFormModel ??= new();
        LoadEquipment();
    }

    private void LoadEquipment()
    {
        _availableEquipment = EquipmentRepository.ReadEquipment().ToList();
    }

    private async Task Submit()
    {
        LootFormModel.ThrowIfNull();

        var percentResult = Percentage.FromInt(LootFormModel.Rarity);
        var lootResult = Loot.Create(
            Guid.Parse(LootFormModel.EquipmentId),
            LootFormModel.Name,
            percentResult.Value,
            LootFormModel.MinQuantity,
            LootFormModel.MaxQuantity,
            LootFormModel.TagsToAssign,
            null
            );
        await LootRepository.CreateLootAsync(lootResult.Value);
    }

    public class CreateLootForm
    {
        public string EquipmentId { get; set; } = null!;
        public string Name { get; set; } = null!;
        public int Rarity { get; set; }
        public int MaxQuantity { get; set; }
        public int MinQuantity { get; set; }
        public HashSet<string> TagsToAssign { get; set; } = new();
    }
}