@page "/descriptors"
@using KaydenMiller.TableTop.LootTableGenerator.Domain.Common.Interfaces
@using KaydenMiller.TableTop.LootTableGenerator.Domain.DescriptorAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Domain.LootAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Domain.ModifierAggregate
@using KaydenMiller.TableTop.LootTableGenerator.Site.Components
@using Throw
@using KaydenMiller.TableTop.LootTableGenerator.Site.Extensions
@inject IDescriptorRepository DescriptorRepository
@inject ILootRepository LootRepository

<MudContainer>
    <TTPaper>
        <h4>Loot To Add</h4>
        <ul>
            @foreach (var loot in @Model?.LootToAdd ?? Enumerable.Empty<Loot>())
            {
                <li>(@loot.MinQuantity-@loot.MaxQuantity) x @loot.Name @@ @loot.Rarity.AsPercentString() / Item</li>
            }
        </ul>
    
        <h4>Modifiers To Add</h4>
        <ul>
            @foreach (var modifier in @Model?.ModifiersToAdd ?? Enumerable.Empty<Modifier>())
            {
                <li>ID: @modifier.Id</li>
            }
        </ul>
    </TTPaper>
    
    
    <TTPaper>
        <h3>Descriptors</h3>

        <MudSelect T="string" Label="Loot To Add" AnchorOrigin="Origin.BottomCenter"
                   @bind-Value="@LootId">
            @foreach (var loot in _availableLootItems)
            {
                <MudSelectItem Value="@(loot.Id.ToString())">@(loot.Name)</MudSelectItem>
            }
        </MudSelect>

        <MudButton Color="Color.Primary" OnClick="@(() => AddLoot(LootId))">Add Loot Item</MudButton>
    </TTPaper>
    
    <TTPaper>
        <MudForm @bind-isValid="@_success" Model="@Model">
            <MudTextField T="string" Label="Descriptor Name"
                          @bind-Value="Model!.Name"></MudTextField>
            <MudButton OnClick="@Submit">
                Create Descriptor
            </MudButton>
        </MudForm>
    </TTPaper>

    <TTPaper>
        <MudSelect T="string" @bind-Value="DescriptorToSelect" AnchorOrigin="Origin.BottomCenter" Label="Descriptor To Select">
            @foreach (var descriptor in DescriptorRepository.ReadDescriptors())
            {
                <MudSelectItem Value="@descriptor.Id.ToString()">@descriptor.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Color="Color.Primary" OnClick="@(async () => await SelectDescriptor(DescriptorToSelect ?? ""))">Select Descriptor</MudButton>
    
        @if (CurrentDescriptor is not null && _calculatedLootItems.Count > 0)
        {
            <div>
                <h1>Descriptor</h1>
                <h2>@CurrentDescriptor.Name</h2>
    
                <ul>
                    @foreach (var loot in _calculatedLootItems)
                    {
                        <li>@loot.Name x @loot.CountAvailable</li>
                    }
                </ul>
            </div>
        }
        else
        {
            <MudText Typo="@Typo.body1">No Loot was available</MudText>
        }
    </TTPaper>
</MudContainer>

@code {
    public Descriptor? CurrentDescriptor { get; set; }
    public string? DescriptorToSelect { get; set; }
    
    public CreateDescriptorForm? Model { get; set; }
    public string? LootId { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new();
        _availableLootItems = GetLoot();
    }

    private bool _success;
    private List<Loot> _availableLootItems = new();
    private List<CalculatedLootItem> _calculatedLootItems = new();
    
    private async Task AddLoot(string? lootId)
    {
        lootId.ThrowIfNull();
        var id = Guid.Parse(lootId);
        var loot = await LootRepository.ReadLootByIdAsync(id);
        Model!.LootToAdd.Add(loot);
    }

    private List<Loot> GetLoot()
    {
        var loot = LootRepository.ReadLoot();
        return loot.ToList();
    }

    private async Task Submit()
    {
        Model.ThrowIfNull();
        Model.Name.ThrowIfNull();
        Model.LootToAdd.Throw().IfCountEquals(0);

        var descriptor = new Descriptor(Model.Name);

        foreach (var item in Model.LootToAdd)
        {
            descriptor.AddLoot(item);
        }

        foreach (var modifier in Model.ModifiersToAdd)
        {
            descriptor.AddModifier(modifier);
        }

        await DescriptorRepository.AddDescriptorAsync(descriptor);
    }

    private async Task SelectDescriptor(string descriptorId)
    {
        var descriptor = await GetDescriptorById(descriptorId);
        _calculatedLootItems = (await GenerateLootFromSelectedDescriptor(descriptor)).ToList();
    }

    private async Task<IEnumerable<CalculatedLootItem>> GenerateLootFromSelectedDescriptor(Descriptor descriptor)
    {
        var lootItems = new List<Loot>();

        foreach (var lootId in descriptor.GetAvailableLootIds())
        {
            lootItems.Add(await LootRepository.ReadLootByIdAsync(lootId));
        }

        return lootItems.Select(li => new CalculatedLootItem(li.Id, li.Name, li.Roll()));
    }

    private async Task<Descriptor> GetDescriptorById(string descriptorId)
    {
        var id = Guid.Parse(descriptorId);
        CurrentDescriptor = await DescriptorRepository.ReadDescriptorAsync(id);
        return CurrentDescriptor;
    }

    public class CreateDescriptorForm
    {
        public string Name { get; set; } = null!;
        public List<Loot> LootToAdd { get; set; } = new();
        public List<Modifier> ModifiersToAdd { get; set; } = new();
    }
    public record CalculatedLootItem(Guid RootLootItemId, string Name, int CountAvailable);
}